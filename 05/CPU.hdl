// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instruction written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // if instruction[0] == 0, excute A instruction
    // else instruction[0] == 1, excute C instruction
    DMux(in=true, sel=instruction[15], a=insA, b=insC);
    // instruction[3..5] are d3, d2, d1 (cooperate with insC)
    And(a=instruction[3], b=insC, out=d3); // for M
    And(a=instruction[4], b=insC, out=d2); // for D
    And(a=instruction[5], b=insC, out=d1); // for A
    DRegister(in=ALUOut, load=d2, out=DOut); // register D
    Or(a=insA, b=d1, out=insAwithd1);
    Mux16(a=ALUOut, b[0..14]=instruction[0..14], b[15]=false, sel=insA, out=ALUOutOrIns);
    ARegister(in=ALUOutOrIns, load=insAwithd1, out=regAOut); // register A
    And(a=d3, b=true, out=writeM);
    Or16(a=regAOut, b=false, out[0..14]=addressM, out[15]=regAOutMSBbit);

    // ALU computation
    // instruction[6..11] are c6, c5, c4, c3, c2, c1
    // instruction[12] is a
    Mux16(a=regAOut, b=inM, sel=instruction[12], out=AorM);
    ALU(x=DOut, y=AorM,
        zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
        out=ALUOut, zr=ALUzr, ng=ALUng);
    Or16(a=ALUOut, b=false, out=outM);
    
    // PC part
    // jump = ((ng & j1) || (ng & j2) || (ng &j3)) & insC
    // instruction[0..2] are j3, j2, j1
    // if ALUzr == 1, jpo = 0
    // else jpo = !jng
    Not(in=ALUng, out=notALUng);
    Mux(a=notALUng, b=false, sel=ALUzr, out=ALUpo);
    And(a=ALUng, b=instruction[2], out=jng);
    And(a=ALUzr, b=instruction[1], out=jzr);
    And(a=ALUpo, b=instruction[0], out=jpo);
    Or(a=jng, b=jzr, out=jle);
    Or(a=jle, b=jpo, out=jmp);
    And(a=jmp, b=insC, out=jump);
    PC(in=regAOut, load=jump, inc=true, reset=reset, out[0..14]=pc);
}