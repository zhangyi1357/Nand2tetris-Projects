/** Represents a linked list of integers. */
class List {
    field Point point;          // a list consists of a data field,
    field List next;         // followed by a list

    /* Creates a List. */
    constructor List new(Point car, List cdr) {
        let point = car;       // the identifiers car and cdr are used in 
        let next = cdr;       // memory of the Lisp programming language
        return this;
    }

    /** Accessors. */
    method Point getData() { return point; }
    method int getNext() { return next; }

    /** Prints this list. */
    method void print() {
        var Point p;
        var List current;    // initializes current to the first item
        let current = this;  // of this list
        while (~(current = null)) {
            let p = current.getData();
            do Output.printInt(p.getx());
            do Output.printChar(32); // prints a space
            do Output.printInt(p.gety());
            do Output.printChar(32); // prints a space
            do Output.println();
            let current = current.getNext();
        }
        return;
    }

    method void removeTail() {
        var List prev, curr;
        var Point p;
        let curr = this;
        let prev = this;
        while (~(curr.getNext() = null)) {
            let prev = curr;
            let curr = curr.getNext();
        }
        let p = curr.getData();
        do Output.printInt(p.getx());
        do Output.printChar(32); // prints a space
        do Output.printInt(p.gety());
        do Output.printChar(32); // prints a space
        do curr.dispose();
        do prev.pointToNull();
        return;
    }

    method void pointToNull() {
        do Output.printString("pointToNull");
        do Output.println();
        let next = null;
        return;
    }

    /** Disposes this List by recursively disposing its tail. */
    method void dispose() {
        if (~(next = null)) {
            do next.dispose();
        }
        // Uses an OS routine to recycle this object.
        do Memory.deAlloc(this);
        return;
    }

    // More list processing methods can come here.

}
